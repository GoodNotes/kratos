// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package kratoscloud

type B2BSSOHook struct {
	// Config corresponds to the JSON schema field "config".
	Config B2BSSOHookConfig `json:"config" yaml:"config" mapstructure:"config"`

	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

type B2BSSOHookConfig map[string]interface{}

// The URL where the endpoint is exposed at. This domain is used to generate
// redirects, form URLs, and more.
type BaseUrl string

// Configure distributed tracing using OpenTelemetry
type ConfigSchemaJSON struct {
	// Specifies the deployment environment to use on the tracer.
	DeploymentEnvironment *string `json:"deployment_environment,omitempty" yaml:"deployment_environment,omitempty" mapstructure:"deployment_environment,omitempty"`

	// Set this to the tracing backend you wish to use. Supports Jaeger, Zipkin, and
	// OTEL.
	Provider *ConfigSchemaJSONProvider `json:"provider,omitempty" yaml:"provider,omitempty" mapstructure:"provider,omitempty"`

	// Providers corresponds to the JSON schema field "providers".
	Providers *ConfigSchemaJSONProviders `json:"providers,omitempty" yaml:"providers,omitempty" mapstructure:"providers,omitempty"`

	// Specifies the service name to use on the tracer.
	ServiceName *string `json:"service_name,omitempty" yaml:"service_name,omitempty" mapstructure:"service_name,omitempty"`
}

type ConfigSchemaJSONProvider string

const ConfigSchemaJSONProviderJaeger ConfigSchemaJSONProvider = "jaeger"
const ConfigSchemaJSONProviderOtel ConfigSchemaJSONProvider = "otel"
const ConfigSchemaJSONProviderZipkin ConfigSchemaJSONProvider = "zipkin"

type ConfigSchemaJSONProviders struct {
	// Configures the jaeger tracing backend.
	Jaeger *ConfigSchemaJSONProvidersJaeger `json:"jaeger,omitempty" yaml:"jaeger,omitempty" mapstructure:"jaeger,omitempty"`

	// Configures the OTLP tracing backend.
	Otlp *ConfigSchemaJSONProvidersOtlp `json:"otlp,omitempty" yaml:"otlp,omitempty" mapstructure:"otlp,omitempty"`

	// Configures the zipkin tracing backend.
	Zipkin *ConfigSchemaJSONProvidersZipkin `json:"zipkin,omitempty" yaml:"zipkin,omitempty" mapstructure:"zipkin,omitempty"`
}

// Configures the jaeger tracing backend.
type ConfigSchemaJSONProvidersJaeger struct {
	// The address of the jaeger-agent where spans should be sent to.
	LocalAgentAddress *string `json:"local_agent_address,omitempty" yaml:"local_agent_address,omitempty" mapstructure:"local_agent_address,omitempty"`

	// Sampling corresponds to the JSON schema field "sampling".
	Sampling *ConfigSchemaJSONProvidersJaegerSampling `json:"sampling,omitempty" yaml:"sampling,omitempty" mapstructure:"sampling,omitempty"`
}

type ConfigSchemaJSONProvidersJaegerSampling struct {
	// The address of jaeger-agent's HTTP sampling server
	ServerUrl *string `json:"server_url,omitempty" yaml:"server_url,omitempty" mapstructure:"server_url,omitempty"`

	// Trace Id ratio sample
	TraceIDRatio *float64 `json:"trace_id_ratio,omitempty" yaml:"trace_id_ratio,omitempty" mapstructure:"trace_id_ratio,omitempty"`
}

// Configures the OTLP tracing backend.
type ConfigSchemaJSONProvidersOtlp struct {
	// AuthorizationHeader corresponds to the JSON schema field
	// "authorization_header".
	AuthorizationHeader *string `json:"authorization_header,omitempty" yaml:"authorization_header,omitempty" mapstructure:"authorization_header,omitempty"`

	// Will use HTTP if set to true; defaults to HTTPS.
	Insecure *bool `json:"insecure,omitempty" yaml:"insecure,omitempty" mapstructure:"insecure,omitempty"`

	// Sampling corresponds to the JSON schema field "sampling".
	Sampling *ConfigSchemaJSONProvidersOtlpSampling `json:"sampling,omitempty" yaml:"sampling,omitempty" mapstructure:"sampling,omitempty"`

	// The endpoint of the OTLP exporter (HTTP) where spans should be sent to.
	ServerUrl *string `json:"server_url,omitempty" yaml:"server_url,omitempty" mapstructure:"server_url,omitempty"`
}

type ConfigSchemaJSONProvidersOtlpSampling struct {
	// Sampling ratio for spans.
	SamplingRatio *float64 `json:"sampling_ratio,omitempty" yaml:"sampling_ratio,omitempty" mapstructure:"sampling_ratio,omitempty"`
}

// Configures the zipkin tracing backend.
type ConfigSchemaJSONProvidersZipkin struct {
	// Sampling corresponds to the JSON schema field "sampling".
	Sampling *ConfigSchemaJSONProvidersZipkinSampling `json:"sampling,omitempty" yaml:"sampling,omitempty" mapstructure:"sampling,omitempty"`

	// The address of the Zipkin server where spans should be sent to.
	ServerUrl *string `json:"server_url,omitempty" yaml:"server_url,omitempty" mapstructure:"server_url,omitempty"`
}

type ConfigSchemaJSONProvidersZipkinSampling struct {
	// Sampling ratio for spans.
	SamplingRatio *float64 `json:"sampling_ratio,omitempty" yaml:"sampling_ratio,omitempty" mapstructure:"sampling_ratio,omitempty"`
}

type CourierTemplates struct {
	// Invalid corresponds to the JSON schema field "invalid".
	Invalid *CourierTemplatesInvalid `json:"invalid,omitempty" yaml:"invalid,omitempty" mapstructure:"invalid,omitempty"`

	// Valid corresponds to the JSON schema field "valid".
	Valid *CourierTemplatesValid `json:"valid,omitempty" yaml:"valid,omitempty" mapstructure:"valid,omitempty"`
}

type CourierTemplatesInvalid struct {
	// Email corresponds to the JSON schema field "email".
	Email EmailCourierTemplate `json:"email" yaml:"email" mapstructure:"email"`
}

type CourierTemplatesValid struct {
	// Email corresponds to the JSON schema field "email".
	Email EmailCourierTemplate `json:"email" yaml:"email" mapstructure:"email"`

	// Sms corresponds to the JSON schema field "sms".
	Sms *SmsCourierTemplate `json:"sms,omitempty" yaml:"sms,omitempty" mapstructure:"sms,omitempty"`
}

// Ory Kratos redirects to this URL per default on completion of self-service flows
// and other browser interaction. Read this [article for more information on
// browser
// redirects](https://www.ory.sh/kratos/docs/concepts/browser-redirect-flow-completion).
type DefaultReturnTo string

type EmailCourierTemplate struct {
	// Body corresponds to the JSON schema field "body".
	Body *EmailCourierTemplateBody `json:"body,omitempty" yaml:"body,omitempty" mapstructure:"body,omitempty"`

	// Subject corresponds to the JSON schema field "subject".
	Subject *string `json:"subject,omitempty" yaml:"subject,omitempty" mapstructure:"subject,omitempty"`
}

type EmailCourierTemplateBody struct {
	// The default template used for sending out emails. The template can contain HTML
	Html *string `json:"html,omitempty" yaml:"html,omitempty" mapstructure:"html,omitempty"`

	// The fallback template for email clients that do not support html.
	Plaintext *string `json:"plaintext,omitempty" yaml:"plaintext,omitempty" mapstructure:"plaintext,omitempty"`
}

type FeatureRequiredAal string

const FeatureRequiredAalAal1 FeatureRequiredAal = "aal1"
const FeatureRequiredAalHighestAvailable FeatureRequiredAal = "highest_available"

type HTTPRequestConfig struct {
	// Define which auth mechanism to use for auth with the HTTP email provider
	Auth HTTPRequestConfigAuth `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// URI pointing to the jsonnet template used for payload generation. Only used for
	// those HTTP methods, which support HTTP body payloads
	Body string `json:"body,omitempty" yaml:"body,omitempty" mapstructure:"body,omitempty"`

	// The HTTP headers that must be applied to request
	Headers HTTPRequestConfigHeaders `json:"headers,omitempty" yaml:"headers,omitempty" mapstructure:"headers,omitempty"`

	// The HTTP method to use (GET, POST, etc). Defaults to POST.
	Method string `json:"method,omitempty" yaml:"method,omitempty" mapstructure:"method,omitempty"`

	// This URL will be used to send the emails to.
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// Define which auth mechanism to use for auth with the HTTP email provider
type HTTPRequestConfigAuth map[string]interface{}

// The HTTP headers that must be applied to request
type HTTPRequestConfigHeaders map[string]string

// The OpenID Connect claims and optionally their properties which should be
// included in the id_token or returned from the UserInfo Endpoint.
type OIDCClaims map[string]interface{}

type OryKratosConfiguration struct {
	// Ciphers corresponds to the JSON schema field "ciphers".
	Ciphers *OryKratosConfigurationCiphers `json:"ciphers,omitempty" yaml:"ciphers,omitempty" mapstructure:"ciphers,omitempty"`

	// Configure how outgoing network calls behave.
	Clients *OryKratosConfigurationClients `json:"clients,omitempty" yaml:"clients,omitempty" mapstructure:"clients,omitempty"`

	// This is a CLI flag and environment variable and can not be set using the config
	// file.
	Config []string `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Configure the HTTP Cookies. Applies to both CSRF and session cookies.
	Cookies *OryKratosConfigurationCookies `json:"cookies,omitempty" yaml:"cookies,omitempty" mapstructure:"cookies,omitempty"`

	// The courier is responsible for sending and delivering messages over email, sms,
	// and other means.
	Courier *OryKratosConfigurationCourier `json:"courier,omitempty" yaml:"courier,omitempty" mapstructure:"courier,omitempty"`

	// Miscellaneous settings used in database related tasks (cleanup, etc.)
	Database *OryKratosConfigurationDatabase `json:"database,omitempty" yaml:"database,omitempty" mapstructure:"database,omitempty"`

	// Dev corresponds to the JSON schema field "dev".
	Dev *bool `json:"dev,omitempty" yaml:"dev,omitempty" mapstructure:"dev,omitempty"`

	// DSN is used to specify the database credentials as a connection URI.
	Dsn string `json:"dsn" yaml:"dsn" mapstructure:"dsn"`

	// Specifies enterprise features. Only effective in the Ory Network or with a
	// valid license.
	Enterprise *OryKratosConfigurationEnterprise `json:"enterprise,omitempty" yaml:"enterprise,omitempty" mapstructure:"enterprise,omitempty"`

	// The port the courier's metrics endpoint listens on (0/disabled by default).
	// This is a CLI flag and environment variable and can not be set using the config
	// file.
	ExposeMetricsPort int `json:"expose-metrics-port,omitempty" yaml:"expose-metrics-port,omitempty" mapstructure:"expose-metrics-port,omitempty"`

	// FeatureFlags corresponds to the JSON schema field "feature_flags".
	FeatureFlags interface{} `json:"feature_flags,omitempty" yaml:"feature_flags,omitempty" mapstructure:"feature_flags,omitempty"`

	// Hashers corresponds to the JSON schema field "hashers".
	Hashers *OryKratosConfigurationHashers `json:"hashers,omitempty" yaml:"hashers,omitempty" mapstructure:"hashers,omitempty"`

	// Help corresponds to the JSON schema field "help".
	Help *bool `json:"help,omitempty" yaml:"help,omitempty" mapstructure:"help,omitempty"`

	// Identity corresponds to the JSON schema field "identity".
	Identity OryKratosConfigurationIdentity `json:"identity" yaml:"identity" mapstructure:"identity"`

	// Configure logging using the following options. Logging will always be sent to
	// stdout and stderr.
	Log *OryKratosConfigurationLog `json:"log,omitempty" yaml:"log,omitempty" mapstructure:"log,omitempty"`

	// Oauth2Provider corresponds to the JSON schema field "oauth2_provider".
	Oauth2Provider *OryKratosConfigurationOauth2Provider `json:"oauth2_provider,omitempty" yaml:"oauth2_provider,omitempty" mapstructure:"oauth2_provider,omitempty"`

	// Please use selfservice.methods.b2b instead. This key will be removed. Only
	// effective in the Ory Network.
	Organizations []interface{} `json:"organizations,omitempty" yaml:"organizations,omitempty" mapstructure:"organizations,omitempty"`

	// Preview corresponds to the JSON schema field "preview".
	Preview *OryKratosConfigurationPreview `json:"preview,omitempty" yaml:"preview,omitempty" mapstructure:"preview,omitempty"`

	// Secrets corresponds to the JSON schema field "secrets".
	Secrets *OryKratosConfigurationSecrets `json:"secrets,omitempty" yaml:"secrets,omitempty" mapstructure:"secrets,omitempty"`

	// Security corresponds to the JSON schema field "security".
	Security *OryKratosConfigurationSecurity `json:"security,omitempty" yaml:"security,omitempty" mapstructure:"security,omitempty"`

	// Selfservice corresponds to the JSON schema field "selfservice".
	Selfservice OryKratosConfigurationSelfservice `json:"selfservice" yaml:"selfservice" mapstructure:"selfservice"`

	// Serve corresponds to the JSON schema field "serve".
	Serve *OryKratosConfigurationServe `json:"serve,omitempty" yaml:"serve,omitempty" mapstructure:"serve,omitempty"`

	// Session corresponds to the JSON schema field "session".
	Session *OryKratosConfigurationSession `json:"session,omitempty" yaml:"session,omitempty" mapstructure:"session,omitempty"`

	// This is a CLI flag and environment variable and can not be set using the config
	// file.
	SqaOptOut bool `json:"sqa-opt-out,omitempty" yaml:"sqa-opt-out,omitempty" mapstructure:"sqa-opt-out,omitempty"`

	// Tracing corresponds to the JSON schema field "tracing".
	Tracing *ConfigSchemaJSON `json:"tracing,omitempty" yaml:"tracing,omitempty" mapstructure:"tracing,omitempty"`

	// SemVer according to https://semver.org/ prefixed with `v` as in our releases.
	Version *string `json:"version,omitempty" yaml:"version,omitempty" mapstructure:"version,omitempty"`

	// This is a CLI flag and environment variable and can not be set using the config
	// file.
	WatchCourier bool `json:"watch-courier,omitempty" yaml:"watch-courier,omitempty" mapstructure:"watch-courier,omitempty"`
}

type OryKratosConfigurationCiphers struct {
	// One of the values: noop, aes, xchacha20-poly1305
	Algorithm OryKratosConfigurationCiphersAlgorithm `json:"algorithm,omitempty" yaml:"algorithm,omitempty" mapstructure:"algorithm,omitempty"`
}

type OryKratosConfigurationCiphersAlgorithm string

const OryKratosConfigurationCiphersAlgorithmAes OryKratosConfigurationCiphersAlgorithm = "aes"
const OryKratosConfigurationCiphersAlgorithmNoop OryKratosConfigurationCiphersAlgorithm = "noop"
const OryKratosConfigurationCiphersAlgorithmXchacha20Poly1305 OryKratosConfigurationCiphersAlgorithm = "xchacha20-poly1305"

// Configure how outgoing network calls behave.
type OryKratosConfigurationClients struct {
	// Configure how outgoing HTTP calls behave.
	HTTP *OryKratosConfigurationClientsHTTP `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`
}

// Configure how outgoing HTTP calls behave.
type OryKratosConfigurationClientsHTTP struct {
	// Disallow all outgoing HTTP calls to private IP ranges. This feature can help
	// protect against SSRF attacks.
	DisallowPrivateIpRanges bool `json:"disallow_private_ip_ranges,omitempty" yaml:"disallow_private_ip_ranges,omitempty" mapstructure:"disallow_private_ip_ranges,omitempty"`

	// Allows the given URLs to be called despite them being in the private IP range.
	// URLs need to have an exact and case-sensitive match to be excempt.
	PrivateIpExceptionUrls []string `json:"private_ip_exception_urls,omitempty" yaml:"private_ip_exception_urls,omitempty" mapstructure:"private_ip_exception_urls,omitempty"`
}

// Configure the HTTP Cookies. Applies to both CSRF and session cookies.
type OryKratosConfigurationCookies struct {
	// Sets the cookie domain for session and CSRF cookies. Useful when dealing with
	// subdomains. Use with care!
	Domain *string `json:"domain,omitempty" yaml:"domain,omitempty" mapstructure:"domain,omitempty"`

	// Sets the session and CSRF cookie path. Use with care!
	Path string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Sets the session and CSRF cookie SameSite.
	SameSite OryKratosConfigurationCookiesSameSite `json:"same_site,omitempty" yaml:"same_site,omitempty" mapstructure:"same_site,omitempty"`

	// Sets the session secure flag. If unset, defaults to !dev mode.
	Secure *string `json:"secure,omitempty" yaml:"secure,omitempty" mapstructure:"secure,omitempty"`
}

type OryKratosConfigurationCookiesSameSite string

const OryKratosConfigurationCookiesSameSiteLax OryKratosConfigurationCookiesSameSite = "Lax"
const OryKratosConfigurationCookiesSameSiteNone OryKratosConfigurationCookiesSameSite = "None"
const OryKratosConfigurationCookiesSameSiteStrict OryKratosConfigurationCookiesSameSite = "Strict"

// The courier is responsible for sending and delivering messages over email, sms,
// and other means.
type OryKratosConfigurationCourier struct {
	// Channels corresponds to the JSON schema field "channels".
	Channels []OryKratosConfigurationCourierChannelsElem `json:"channels,omitempty" yaml:"channels,omitempty" mapstructure:"channels,omitempty"`

	// Defines how emails will be sent, either through SMTP (default) or HTTP.
	DeliveryStrategy OryKratosConfigurationCourierDeliveryStrategy `json:"delivery_strategy,omitempty" yaml:"delivery_strategy,omitempty" mapstructure:"delivery_strategy,omitempty"`

	// Configures outgoing emails using HTTP.
	HTTP *OryKratosConfigurationCourierHTTP `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`

	// Defines the maximum number of times the sending of a message is retried after
	// it failed before it is marked as abandoned
	MessageRetries int `json:"message_retries,omitempty" yaml:"message_retries,omitempty" mapstructure:"message_retries,omitempty"`

	// Configures outgoing emails using the SMTP protocol.
	Smtp *OryKratosConfigurationCourierSmtp `json:"smtp,omitempty" yaml:"smtp,omitempty" mapstructure:"smtp,omitempty"`

	// You can override certain or all message templates by pointing this key to the
	// path where the templates are located.
	TemplateOverridePath *string `json:"template_override_path,omitempty" yaml:"template_override_path,omitempty" mapstructure:"template_override_path,omitempty"`

	// Templates corresponds to the JSON schema field "templates".
	Templates *OryKratosConfigurationCourierTemplates `json:"templates,omitempty" yaml:"templates,omitempty" mapstructure:"templates,omitempty"`

	// Configures the dispatch worker.
	Worker *OryKratosConfigurationCourierWorker `json:"worker,omitempty" yaml:"worker,omitempty" mapstructure:"worker,omitempty"`
}

type OryKratosConfigurationCourierChannelsElem struct {
	// The channel id. Corresponds to the .via property of the identity schema for
	// recovery, verification, etc. Currently only sms is supported.
	ID OryKratosConfigurationCourierChannelsElemID `json:"id" yaml:"id" mapstructure:"id"`

	// RequestConfig corresponds to the JSON schema field "request_config".
	RequestConfig HTTPRequestConfig `json:"request_config" yaml:"request_config" mapstructure:"request_config"`

	// The channel type. Currently only http is supported.
	Type *OryKratosConfigurationCourierChannelsElemType `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type OryKratosConfigurationCourierChannelsElemID string

const OryKratosConfigurationCourierChannelsElemIDSms OryKratosConfigurationCourierChannelsElemID = "sms"

type OryKratosConfigurationCourierChannelsElemType string

const OryKratosConfigurationCourierChannelsElemTypeHTTP OryKratosConfigurationCourierChannelsElemType = "http"

type OryKratosConfigurationCourierDeliveryStrategy string

const OryKratosConfigurationCourierDeliveryStrategyHTTP OryKratosConfigurationCourierDeliveryStrategy = "http"
const OryKratosConfigurationCourierDeliveryStrategySmtp OryKratosConfigurationCourierDeliveryStrategy = "smtp"

// Configures outgoing emails using HTTP.
type OryKratosConfigurationCourierHTTP struct {
	// RequestConfig corresponds to the JSON schema field "request_config".
	RequestConfig *HTTPRequestConfig `json:"request_config,omitempty" yaml:"request_config,omitempty" mapstructure:"request_config,omitempty"`
}

// Configures outgoing emails using the SMTP protocol.
type OryKratosConfigurationCourierSmtp struct {
	// Path of the client X.509 certificate, in case of certificate based client
	// authentication to the SMTP server.
	ClientCertPath string `json:"client_cert_path,omitempty" yaml:"client_cert_path,omitempty" mapstructure:"client_cert_path,omitempty"`

	// Path of the client certificate private key, in case of certificate based client
	// authentication to the SMTP server
	ClientKeyPath string `json:"client_key_path,omitempty" yaml:"client_key_path,omitempty" mapstructure:"client_key_path,omitempty"`

	// This URI will be used to connect to the SMTP server. Use the scheme smtps for
	// implicit TLS sessions or smtp for explicit StartTLS/cleartext sessions. Please
	// note that TLS is always enforced with certificate trust verification by default
	// for security reasons on both schemes. With the smtp scheme you can use the
	// query parameter (`?disable_starttls=true`) to allow cleartext sessions or
	// (`?disable_starttls=false`) to enforce StartTLS (default behaviour).
	// Additionally, use the query parameter to allow (`?skip_ssl_verify=true`) or
	// disallow (`?skip_ssl_verify=false`) self-signed TLS certificates (default
	// behaviour) on both implicit and explicit TLS sessions.
	ConnectionUri *string `json:"connection_uri,omitempty" yaml:"connection_uri,omitempty" mapstructure:"connection_uri,omitempty"`

	// The recipient of an email will see this as the sender address.
	FromAddress string `json:"from_address,omitempty" yaml:"from_address,omitempty" mapstructure:"from_address,omitempty"`

	// The recipient of an email will see this as the sender name.
	FromName *string `json:"from_name,omitempty" yaml:"from_name,omitempty" mapstructure:"from_name,omitempty"`

	// These headers will be passed in the SMTP conversation -- e.g. when using the
	// AWS SES SMTP interface for cross-account sending.
	Headers OryKratosConfigurationCourierSmtpHeaders `json:"headers,omitempty" yaml:"headers,omitempty" mapstructure:"headers,omitempty"`

	// Identifier used in the SMTP HELO/EHLO command. Some SMTP relays require a
	// unique identifier.
	LocalName string `json:"local_name,omitempty" yaml:"local_name,omitempty" mapstructure:"local_name,omitempty"`
}

// These headers will be passed in the SMTP conversation -- e.g. when using the AWS
// SES SMTP interface for cross-account sending.
type OryKratosConfigurationCourierSmtpHeaders map[string]string

type OryKratosConfigurationCourierTemplates struct {
	// LoginCode corresponds to the JSON schema field "login_code".
	LoginCode *OryKratosConfigurationCourierTemplatesLoginCode `json:"login_code,omitempty" yaml:"login_code,omitempty" mapstructure:"login_code,omitempty"`

	// Recovery corresponds to the JSON schema field "recovery".
	Recovery *CourierTemplates `json:"recovery,omitempty" yaml:"recovery,omitempty" mapstructure:"recovery,omitempty"`

	// RecoveryCode corresponds to the JSON schema field "recovery_code".
	RecoveryCode *CourierTemplates `json:"recovery_code,omitempty" yaml:"recovery_code,omitempty" mapstructure:"recovery_code,omitempty"`

	// RegistrationCode corresponds to the JSON schema field "registration_code".
	RegistrationCode *OryKratosConfigurationCourierTemplatesRegistrationCode `json:"registration_code,omitempty" yaml:"registration_code,omitempty" mapstructure:"registration_code,omitempty"`

	// Verification corresponds to the JSON schema field "verification".
	Verification *CourierTemplates `json:"verification,omitempty" yaml:"verification,omitempty" mapstructure:"verification,omitempty"`

	// VerificationCode corresponds to the JSON schema field "verification_code".
	VerificationCode *CourierTemplates `json:"verification_code,omitempty" yaml:"verification_code,omitempty" mapstructure:"verification_code,omitempty"`
}

type OryKratosConfigurationCourierTemplatesLoginCode struct {
	// Valid corresponds to the JSON schema field "valid".
	Valid *OryKratosConfigurationCourierTemplatesLoginCodeValid `json:"valid,omitempty" yaml:"valid,omitempty" mapstructure:"valid,omitempty"`
}

type OryKratosConfigurationCourierTemplatesLoginCodeValid struct {
	// Email corresponds to the JSON schema field "email".
	Email EmailCourierTemplate `json:"email" yaml:"email" mapstructure:"email"`

	// Sms corresponds to the JSON schema field "sms".
	Sms *SmsCourierTemplate `json:"sms,omitempty" yaml:"sms,omitempty" mapstructure:"sms,omitempty"`
}

type OryKratosConfigurationCourierTemplatesRegistrationCode struct {
	// Valid corresponds to the JSON schema field "valid".
	Valid *OryKratosConfigurationCourierTemplatesRegistrationCodeValid `json:"valid,omitempty" yaml:"valid,omitempty" mapstructure:"valid,omitempty"`
}

type OryKratosConfigurationCourierTemplatesRegistrationCodeValid struct {
	// Email corresponds to the JSON schema field "email".
	Email EmailCourierTemplate `json:"email" yaml:"email" mapstructure:"email"`

	// Sms corresponds to the JSON schema field "sms".
	Sms *SmsCourierTemplate `json:"sms,omitempty" yaml:"sms,omitempty" mapstructure:"sms,omitempty"`
}

// Configures the dispatch worker.
type OryKratosConfigurationCourierWorker struct {
	// Defines how many messages are pulled from the queue at once.
	PullCount int `json:"pull_count,omitempty" yaml:"pull_count,omitempty" mapstructure:"pull_count,omitempty"`

	// Defines how long the worker waits before pulling messages from the queue again.
	PullWait string `json:"pull_wait,omitempty" yaml:"pull_wait,omitempty" mapstructure:"pull_wait,omitempty"`
}

// Miscellaneous settings used in database related tasks (cleanup, etc.)
type OryKratosConfigurationDatabase struct {
	// Settings that controls how the database cleanup process is configured (delays,
	// batch size, etc.)
	Cleanup *OryKratosConfigurationDatabaseCleanup `json:"cleanup,omitempty" yaml:"cleanup,omitempty" mapstructure:"cleanup,omitempty"`
}

// Settings that controls how the database cleanup process is configured (delays,
// batch size, etc.)
type OryKratosConfigurationDatabaseCleanup struct {
	// Controls how many records should be purged from one table during database
	// cleanup task
	BatchSize int `json:"batch_size,omitempty" yaml:"batch_size,omitempty" mapstructure:"batch_size,omitempty"`

	// Controls how old records do we want to leave
	OlderThan string `json:"older_than,omitempty" yaml:"older_than,omitempty" mapstructure:"older_than,omitempty"`

	// Configures delays between each step of the cleanup process. It is useful to
	// tune the process so it will be efficient and performant.
	Sleep *OryKratosConfigurationDatabaseCleanupSleep `json:"sleep,omitempty" yaml:"sleep,omitempty" mapstructure:"sleep,omitempty"`
}

// Configures delays between each step of the cleanup process. It is useful to tune
// the process so it will be efficient and performant.
type OryKratosConfigurationDatabaseCleanupSleep struct {
	// Controls the delay time between cleaning each table in one cleanup iteration
	Tables string `json:"tables,omitempty" yaml:"tables,omitempty" mapstructure:"tables,omitempty"`
}

// Specifies enterprise features. Only effective in the Ory Network or with a valid
// license.
type OryKratosConfigurationEnterprise struct {
	// A fallback URL template used when looking up identity schemas.
	IdentitySchemaFallbackUrlTemplate *string `json:"identity_schema_fallback_url_template,omitempty" yaml:"identity_schema_fallback_url_template,omitempty" mapstructure:"identity_schema_fallback_url_template,omitempty"`
}

type OryKratosConfigurationHashers struct {
	// One of the values: argon2, bcrypt.
	// Any other hashes will be migrated to the set algorithm once an identity
	// authenticates using their password.
	Algorithm OryKratosConfigurationHashersAlgorithm `json:"algorithm,omitempty" yaml:"algorithm,omitempty" mapstructure:"algorithm,omitempty"`

	// Argon2 corresponds to the JSON schema field "argon2".
	Argon2 *OryKratosConfigurationHashersArgon2 `json:"argon2,omitempty" yaml:"argon2,omitempty" mapstructure:"argon2,omitempty"`

	// Bcrypt corresponds to the JSON schema field "bcrypt".
	Bcrypt *OryKratosConfigurationHashersBcrypt `json:"bcrypt,omitempty" yaml:"bcrypt,omitempty" mapstructure:"bcrypt,omitempty"`
}

type OryKratosConfigurationHashersAlgorithm string

const OryKratosConfigurationHashersAlgorithmArgon2 OryKratosConfigurationHashersAlgorithm = "argon2"
const OryKratosConfigurationHashersAlgorithmBcrypt OryKratosConfigurationHashersAlgorithm = "bcrypt"

type OryKratosConfigurationHashersArgon2 struct {
	// The memory dedicated for Kratos. As password hashing is very resource intense,
	// Kratos will monitor the memory consumption and warn about high values.
	DedicatedMemory string `json:"dedicated_memory,omitempty" yaml:"dedicated_memory,omitempty" mapstructure:"dedicated_memory,omitempty"`

	// The standard deviation expected for hashing operations. If this value is
	// exceeded you will be warned in the logs to adjust the parameters.
	ExpectedDeviation string `json:"expected_deviation,omitempty" yaml:"expected_deviation,omitempty" mapstructure:"expected_deviation,omitempty"`

	// The time a hashing operation (~login latency) should take.
	ExpectedDuration string `json:"expected_duration,omitempty" yaml:"expected_duration,omitempty" mapstructure:"expected_duration,omitempty"`

	// Iterations corresponds to the JSON schema field "iterations".
	Iterations int `json:"iterations,omitempty" yaml:"iterations,omitempty" mapstructure:"iterations,omitempty"`

	// KeyLength corresponds to the JSON schema field "key_length".
	KeyLength int `json:"key_length,omitempty" yaml:"key_length,omitempty" mapstructure:"key_length,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory string `json:"memory,omitempty" yaml:"memory,omitempty" mapstructure:"memory,omitempty"`

	// Number of parallel workers, defaults to 2*runtime.NumCPU().
	Parallelism *int `json:"parallelism,omitempty" yaml:"parallelism,omitempty" mapstructure:"parallelism,omitempty"`

	// SaltLength corresponds to the JSON schema field "salt_length".
	SaltLength int `json:"salt_length,omitempty" yaml:"salt_length,omitempty" mapstructure:"salt_length,omitempty"`
}

type OryKratosConfigurationHashersBcrypt struct {
	// Cost corresponds to the JSON schema field "cost".
	Cost int `json:"cost" yaml:"cost" mapstructure:"cost"`
}

type OryKratosConfigurationIdentity struct {
	// This Identity Schema will be used as the default for self-service flows. Its ID
	// needs to exist in the "schemas" list.
	DefaultSchemaID string `json:"default_schema_id,omitempty" yaml:"default_schema_id,omitempty" mapstructure:"default_schema_id,omitempty"`

	// Note that identities that used the "default_schema_url" field in older kratos
	// versions will be corrupted unless you specify their schema url with the id
	// "default" in this list.
	Schemas []OryKratosConfigurationIdentitySchemasElem `json:"schemas" yaml:"schemas" mapstructure:"schemas"`
}

type OryKratosConfigurationIdentitySchemasElem struct {
	// ID corresponds to the JSON schema field "id".
	ID string `json:"id" yaml:"id" mapstructure:"id"`

	// URL for JSON Schema which describes a identity's traits. Can be a file path, a
	// https URL, or a base64 encoded string.
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

// Configure logging using the following options. Logging will always be sent to
// stdout and stderr.
type OryKratosConfigurationLog struct {
	// The log format can either be text or JSON.
	Format *OryKratosConfigurationLogFormat `json:"format,omitempty" yaml:"format,omitempty" mapstructure:"format,omitempty"`

	// If set will leak sensitive values (e.g. emails) in the logs.
	LeakSensitiveValues *bool `json:"leak_sensitive_values,omitempty" yaml:"leak_sensitive_values,omitempty" mapstructure:"leak_sensitive_values,omitempty"`

	// Debug enables stack traces on errors. Can also be set using environment
	// variable LOG_LEVEL.
	Level OryKratosConfigurationLogLevel `json:"level,omitempty" yaml:"level,omitempty" mapstructure:"level,omitempty"`

	// Text to use, when redacting sensitive log value.
	RedactionText *string `json:"redaction_text,omitempty" yaml:"redaction_text,omitempty" mapstructure:"redaction_text,omitempty"`
}

type OryKratosConfigurationLogFormat string

const OryKratosConfigurationLogFormatJSON OryKratosConfigurationLogFormat = "json"
const OryKratosConfigurationLogFormatText OryKratosConfigurationLogFormat = "text"

type OryKratosConfigurationLogLevel string

const OryKratosConfigurationLogLevelDebug OryKratosConfigurationLogLevel = "debug"
const OryKratosConfigurationLogLevelError OryKratosConfigurationLogLevel = "error"
const OryKratosConfigurationLogLevelFatal OryKratosConfigurationLogLevel = "fatal"
const OryKratosConfigurationLogLevelInfo OryKratosConfigurationLogLevel = "info"
const OryKratosConfigurationLogLevelPanic OryKratosConfigurationLogLevel = "panic"
const OryKratosConfigurationLogLevelTrace OryKratosConfigurationLogLevel = "trace"
const OryKratosConfigurationLogLevelWarning OryKratosConfigurationLogLevel = "warning"

type OryKratosConfigurationOauth2Provider struct {
	// These headers will be passed in HTTP request to the OAuth2 Provider.
	Headers OryKratosConfigurationOauth2ProviderHeaders `json:"headers,omitempty" yaml:"headers,omitempty" mapstructure:"headers,omitempty"`

	// Override the return_to query parameter with the OAuth2 provider request URL
	// when perfoming an OAuth2 login flow.
	OverrideReturnTo bool `json:"override_return_to,omitempty" yaml:"override_return_to,omitempty" mapstructure:"override_return_to,omitempty"`

	// If set, the login and registration flows will handle the Ory OAuth 2.0 & OpenID
	// `login_challenge` query parameter to serve as an OpenID Connect Provider. This
	// URL should point to Ory Hydra when you are not running on the Ory Network and
	// be left untouched otherwise.
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// These headers will be passed in HTTP request to the OAuth2 Provider.
type OryKratosConfigurationOauth2ProviderHeaders map[string]string

type OryKratosConfigurationPreview struct {
	// The default consistency level to use when reading from the database. Defaults
	// to `strong` to not break existing API contracts. Only set this to `eventual` if
	// you can accept that other read APIs will suddenly return eventually consistent
	// results. It is only effective in Ory Network.
	DefaultReadConsistencyLevel OryKratosConfigurationPreviewDefaultReadConsistencyLevel `json:"default_read_consistency_level,omitempty" yaml:"default_read_consistency_level,omitempty" mapstructure:"default_read_consistency_level,omitempty"`
}

type OryKratosConfigurationPreviewDefaultReadConsistencyLevel string

const OryKratosConfigurationPreviewDefaultReadConsistencyLevelEventual OryKratosConfigurationPreviewDefaultReadConsistencyLevel = "eventual"
const OryKratosConfigurationPreviewDefaultReadConsistencyLevelStrong OryKratosConfigurationPreviewDefaultReadConsistencyLevel = "strong"

type OryKratosConfigurationSecrets struct {
	// The first secret in the array is used for encryption data while all other keys
	// are used to decrypt older data that were signed with.
	Cipher []string `json:"cipher,omitempty" yaml:"cipher,omitempty" mapstructure:"cipher,omitempty"`

	// The first secret in the array is used for encrypting cookies while all other
	// keys are used to decrypt older cookies that were signed with that old secret.
	Cookie []string `json:"cookie,omitempty" yaml:"cookie,omitempty" mapstructure:"cookie,omitempty"`

	// The first secret in the array is used for signing and encrypting things while
	// all other keys are used to verify and decrypt older things that were signed
	// with that old secret.
	Default []string `json:"default,omitempty" yaml:"default,omitempty" mapstructure:"default,omitempty"`
}

type OryKratosConfigurationSecurity struct {
	// AccountEnumeration corresponds to the JSON schema field "account_enumeration".
	AccountEnumeration *OryKratosConfigurationSecurityAccountEnumeration `json:"account_enumeration,omitempty" yaml:"account_enumeration,omitempty" mapstructure:"account_enumeration,omitempty"`
}

type OryKratosConfigurationSecurityAccountEnumeration struct {
	// Mitigate account enumeration by making it harder to figure out if an identifier
	// (email, phone number) exists or not. Enabling this setting degrades user
	// experience. This setting does not mitigate all possible attack vectors yet.
	Mitigate bool `json:"mitigate,omitempty" yaml:"mitigate,omitempty" mapstructure:"mitigate,omitempty"`
}

type OryKratosConfigurationSelfservice struct {
	// List of URLs that are allowed to be redirected to. A redirection request is
	// made by appending `?return_to=...` to Login, Registration, and other
	// self-service flows.
	AllowedReturnUrls []string `json:"allowed_return_urls,omitempty" yaml:"allowed_return_urls,omitempty" mapstructure:"allowed_return_urls,omitempty"`

	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl DefaultReturnTo `json:"default_browser_return_url" yaml:"default_browser_return_url" mapstructure:"default_browser_return_url"`

	// Flows corresponds to the JSON schema field "flows".
	Flows *OryKratosConfigurationSelfserviceFlows `json:"flows,omitempty" yaml:"flows,omitempty" mapstructure:"flows,omitempty"`

	// Methods corresponds to the JSON schema field "methods".
	Methods *OryKratosConfigurationSelfserviceMethods `json:"methods,omitempty" yaml:"methods,omitempty" mapstructure:"methods,omitempty"`
}

type OryKratosConfigurationSelfserviceFlows struct {
	// Error corresponds to the JSON schema field "error".
	Error *OryKratosConfigurationSelfserviceFlowsError `json:"error,omitempty" yaml:"error,omitempty" mapstructure:"error,omitempty"`

	// Login corresponds to the JSON schema field "login".
	Login *OryKratosConfigurationSelfserviceFlowsLogin `json:"login,omitempty" yaml:"login,omitempty" mapstructure:"login,omitempty"`

	// Logout corresponds to the JSON schema field "logout".
	Logout *OryKratosConfigurationSelfserviceFlowsLogout `json:"logout,omitempty" yaml:"logout,omitempty" mapstructure:"logout,omitempty"`

	// Recovery corresponds to the JSON schema field "recovery".
	Recovery *OryKratosConfigurationSelfserviceFlowsRecovery `json:"recovery,omitempty" yaml:"recovery,omitempty" mapstructure:"recovery,omitempty"`

	// Registration corresponds to the JSON schema field "registration".
	Registration *OryKratosConfigurationSelfserviceFlowsRegistration `json:"registration,omitempty" yaml:"registration,omitempty" mapstructure:"registration,omitempty"`

	// Settings corresponds to the JSON schema field "settings".
	Settings *OryKratosConfigurationSelfserviceFlowsSettings `json:"settings,omitempty" yaml:"settings,omitempty" mapstructure:"settings,omitempty"`

	// Verification corresponds to the JSON schema field "verification".
	Verification *OryKratosConfigurationSelfserviceFlowsVerification `json:"verification,omitempty" yaml:"verification,omitempty" mapstructure:"verification,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsError struct {
	// URL where the Ory Kratos Error UI is hosted. Check the [reference
	// implementation](https://github.com/ory/kratos-selfservice-ui-node).
	UiUrl string `json:"ui_url,omitempty" yaml:"ui_url,omitempty" mapstructure:"ui_url,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsLogin struct {
	// After corresponds to the JSON schema field "after".
	After *SelfServiceAfterLogin `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Before corresponds to the JSON schema field "before".
	Before *SelfServiceBeforeLogin `json:"before,omitempty" yaml:"before,omitempty" mapstructure:"before,omitempty"`

	// Lifespan corresponds to the JSON schema field "lifespan".
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// The style of the login flow. If set to `unified` the login flow will be a
	// one-step process. If set to `identifier_first` (experimental!) the login flow
	// will first ask for the identifier and then the credentials.
	Style OryKratosConfigurationSelfserviceFlowsLoginStyle `json:"style,omitempty" yaml:"style,omitempty" mapstructure:"style,omitempty"`

	// URL where the Login UI is hosted. Check the [reference
	// implementation](https://github.com/ory/kratos-selfservice-ui-node).
	UiUrl string `json:"ui_url,omitempty" yaml:"ui_url,omitempty" mapstructure:"ui_url,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsLoginStyle string

const OryKratosConfigurationSelfserviceFlowsLoginStyleIdentifierFirst OryKratosConfigurationSelfserviceFlowsLoginStyle = "identifier_first"
const OryKratosConfigurationSelfserviceFlowsLoginStyleUnified OryKratosConfigurationSelfserviceFlowsLoginStyle = "unified"

type OryKratosConfigurationSelfserviceFlowsLogout struct {
	// After corresponds to the JSON schema field "after".
	After *OryKratosConfigurationSelfserviceFlowsLogoutAfter `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsLogoutAfter struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsRecovery struct {
	// After corresponds to the JSON schema field "after".
	After *SelfServiceAfterRecovery `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Before corresponds to the JSON schema field "before".
	Before *SelfServiceBeforeRecovery `json:"before,omitempty" yaml:"before,omitempty" mapstructure:"before,omitempty"`

	// If set to true will enable [Account
	// Recovery](https://www.ory.sh/kratos/docs/self-service/flows/password-reset-account-recovery/).
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Sets how long the recovery request is valid. If expired, the user has to redo
	// the flow.
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// Whether to notify recipients, if recovery was requested for their account.
	NotifyUnknownRecipients bool `json:"notify_unknown_recipients,omitempty" yaml:"notify_unknown_recipients,omitempty" mapstructure:"notify_unknown_recipients,omitempty"`

	// URL where the Ory Recovery UI is hosted. This is the page where users request
	// and complete account recovery. Check the [reference
	// implementation](https://github.com/ory/kratos-selfservice-ui-node).
	UiUrl string `json:"ui_url,omitempty" yaml:"ui_url,omitempty" mapstructure:"ui_url,omitempty"`

	// The strategy to use for recovery requests
	Use OryKratosConfigurationSelfserviceFlowsRecoveryUse `json:"use,omitempty" yaml:"use,omitempty" mapstructure:"use,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsRecoveryUse string

const OryKratosConfigurationSelfserviceFlowsRecoveryUseCode OryKratosConfigurationSelfserviceFlowsRecoveryUse = "code"
const OryKratosConfigurationSelfserviceFlowsRecoveryUseLink OryKratosConfigurationSelfserviceFlowsRecoveryUse = "link"

type OryKratosConfigurationSelfserviceFlowsRegistration struct {
	// After corresponds to the JSON schema field "after".
	After *SelfServiceAfterRegistration `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Before corresponds to the JSON schema field "before".
	Before *SelfServiceBeforeRegistration `json:"before,omitempty" yaml:"before,omitempty" mapstructure:"before,omitempty"`

	// Two-step registration is a significantly improved sign up flow and recommended
	// when using more than one sign up methods. To revert to one-step registration,
	// set this to `true`.
	EnableLegacyOneStep bool `json:"enable_legacy_one_step,omitempty" yaml:"enable_legacy_one_step,omitempty" mapstructure:"enable_legacy_one_step,omitempty"`

	// If set to true will enable [User
	// Registration](https://www.ory.sh/kratos/docs/self-service/flows/user-registration/).
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Lifespan corresponds to the JSON schema field "lifespan".
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// When registration fails because an account with the given credentials or
	// addresses previously signed up, provide login hints about available methods to
	// sign in to the user.
	LoginHints bool `json:"login_hints,omitempty" yaml:"login_hints,omitempty" mapstructure:"login_hints,omitempty"`

	// URL where the Registration UI is hosted. Check the [reference
	// implementation](https://github.com/ory/kratos-selfservice-ui-node).
	UiUrl string `json:"ui_url,omitempty" yaml:"ui_url,omitempty" mapstructure:"ui_url,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsSettings struct {
	// After corresponds to the JSON schema field "after".
	After *SelfServiceAfterSettings `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Before corresponds to the JSON schema field "before".
	Before *SelfServiceBeforeSettings `json:"before,omitempty" yaml:"before,omitempty" mapstructure:"before,omitempty"`

	// Lifespan corresponds to the JSON schema field "lifespan".
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// PrivilegedSessionMaxAge corresponds to the JSON schema field
	// "privileged_session_max_age".
	PrivilegedSessionMaxAge string `json:"privileged_session_max_age,omitempty" yaml:"privileged_session_max_age,omitempty" mapstructure:"privileged_session_max_age,omitempty"`

	// RequiredAal corresponds to the JSON schema field "required_aal".
	RequiredAal *FeatureRequiredAal `json:"required_aal,omitempty" yaml:"required_aal,omitempty" mapstructure:"required_aal,omitempty"`

	// URL where the Settings UI is hosted. Check the [reference
	// implementation](https://github.com/ory/kratos-selfservice-ui-node).
	UiUrl string `json:"ui_url,omitempty" yaml:"ui_url,omitempty" mapstructure:"ui_url,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsVerification struct {
	// After corresponds to the JSON schema field "after".
	After *SelfServiceAfterVerification `json:"after,omitempty" yaml:"after,omitempty" mapstructure:"after,omitempty"`

	// Before corresponds to the JSON schema field "before".
	Before *SelfServiceBeforeVerification `json:"before,omitempty" yaml:"before,omitempty" mapstructure:"before,omitempty"`

	// If set to true will enable [Email and Phone Verification and Account
	// Activation](https://www.ory.sh/kratos/docs/self-service/flows/verify-email-account-activation/).
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Sets how long the verification request (for the UI interaction) is valid.
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// Whether to notify recipients, if verification was requested for their address.
	NotifyUnknownRecipients bool `json:"notify_unknown_recipients,omitempty" yaml:"notify_unknown_recipients,omitempty" mapstructure:"notify_unknown_recipients,omitempty"`

	// URL where the Ory Verify UI is hosted. This is the page where users activate
	// and / or verify their email or telephone number. Check the [reference
	// implementation](https://github.com/ory/kratos-selfservice-ui-node).
	UiUrl string `json:"ui_url,omitempty" yaml:"ui_url,omitempty" mapstructure:"ui_url,omitempty"`

	// The strategy to use for verification requests
	Use OryKratosConfigurationSelfserviceFlowsVerificationUse `json:"use,omitempty" yaml:"use,omitempty" mapstructure:"use,omitempty"`
}

type OryKratosConfigurationSelfserviceFlowsVerificationUse string

const OryKratosConfigurationSelfserviceFlowsVerificationUseCode OryKratosConfigurationSelfserviceFlowsVerificationUse = "code"
const OryKratosConfigurationSelfserviceFlowsVerificationUseLink OryKratosConfigurationSelfserviceFlowsVerificationUse = "link"

type OryKratosConfigurationSelfserviceMethods struct {
	// Single Sign-On for B2B allows your customers to bring their own (workforce)
	// identity server (e.g. OneLogin). This feature is not available in the open
	// source licensed code.
	B2B *OryKratosConfigurationSelfserviceMethodsB2B `json:"b2b,omitempty" yaml:"b2b,omitempty" mapstructure:"b2b,omitempty"`

	// Code corresponds to the JSON schema field "code".
	Code *OryKratosConfigurationSelfserviceMethodsCode `json:"code,omitempty" yaml:"code,omitempty" mapstructure:"code,omitempty"`

	// Link corresponds to the JSON schema field "link".
	Link *OryKratosConfigurationSelfserviceMethodsLink `json:"link,omitempty" yaml:"link,omitempty" mapstructure:"link,omitempty"`

	// LookupSecret corresponds to the JSON schema field "lookup_secret".
	LookupSecret *OryKratosConfigurationSelfserviceMethodsLookupSecret `json:"lookup_secret,omitempty" yaml:"lookup_secret,omitempty" mapstructure:"lookup_secret,omitempty"`

	// Oidc corresponds to the JSON schema field "oidc".
	Oidc *OryKratosConfigurationSelfserviceMethodsOidc `json:"oidc,omitempty" yaml:"oidc,omitempty" mapstructure:"oidc,omitempty"`

	// Passkey corresponds to the JSON schema field "passkey".
	Passkey *OryKratosConfigurationSelfserviceMethodsPasskey `json:"passkey,omitempty" yaml:"passkey,omitempty" mapstructure:"passkey,omitempty"`

	// Password corresponds to the JSON schema field "password".
	Password *OryKratosConfigurationSelfserviceMethodsPassword `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Profile corresponds to the JSON schema field "profile".
	Profile *OryKratosConfigurationSelfserviceMethodsProfile `json:"profile,omitempty" yaml:"profile,omitempty" mapstructure:"profile,omitempty"`

	// Totp corresponds to the JSON schema field "totp".
	Totp *OryKratosConfigurationSelfserviceMethodsTotp `json:"totp,omitempty" yaml:"totp,omitempty" mapstructure:"totp,omitempty"`

	// Webauthn corresponds to the JSON schema field "webauthn".
	Webauthn *OryKratosConfigurationSelfserviceMethodsWebauthn `json:"webauthn,omitempty" yaml:"webauthn,omitempty" mapstructure:"webauthn,omitempty"`
}

// Single Sign-On for B2B allows your customers to bring their own (workforce)
// identity server (e.g. OneLogin). This feature is not available in the open
// source licensed code.
type OryKratosConfigurationSelfserviceMethodsB2B struct {
	// Config corresponds to the JSON schema field "config".
	Config *OryKratosConfigurationSelfserviceMethodsB2BConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsB2BConfig struct {
	// Organizations corresponds to the JSON schema field "organizations".
	Organizations []OryKratosConfigurationSelfserviceMethodsB2BConfigOrganizationsElem `json:"organizations,omitempty" yaml:"organizations,omitempty" mapstructure:"organizations,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsB2BConfigOrganizationsElem struct {
	// Domains corresponds to the JSON schema field "domains".
	Domains []string `json:"domains,omitempty" yaml:"domains,omitempty" mapstructure:"domains,omitempty"`

	// The ID of the organization.
	ID *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The label of the organization.
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsCode struct {
	// Additional configuration for the code strategy.
	Config *OryKratosConfigurationSelfserviceMethodsCodeConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// MfaEnabled corresponds to the JSON schema field "mfa_enabled".
	MfaEnabled bool `json:"mfa_enabled,omitempty" yaml:"mfa_enabled,omitempty" mapstructure:"mfa_enabled,omitempty"`

	// If set to true, code.enabled will be set to true as well.
	PasswordlessEnabled bool `json:"passwordless_enabled,omitempty" yaml:"passwordless_enabled,omitempty" mapstructure:"passwordless_enabled,omitempty"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

// Additional configuration for the code strategy.
type OryKratosConfigurationSelfserviceMethodsCodeConfig struct {
	// Lifespan corresponds to the JSON schema field "lifespan".
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// Enabling this allows users to sign in with the code method, even if their
	// identity schema or their credentials are not set up to use the code method. If
	// enabled, a verified address (such as an email) will be used to send the code to
	// the user. Use with caution and only if actually needed.
	MissingCredentialFallbackEnabled bool `json:"missing_credential_fallback_enabled,omitempty" yaml:"missing_credential_fallback_enabled,omitempty" mapstructure:"missing_credential_fallback_enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsLink struct {
	// Additional configuration for the link strategy.
	Config *OryKratosConfigurationSelfserviceMethodsLinkConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

// Additional configuration for the link strategy.
type OryKratosConfigurationSelfserviceMethodsLinkConfig struct {
	// BaseUrl corresponds to the JSON schema field "base_url".
	BaseUrl *string `json:"base_url,omitempty" yaml:"base_url,omitempty" mapstructure:"base_url,omitempty"`

	// Lifespan corresponds to the JSON schema field "lifespan".
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsLookupSecret struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsOidc struct {
	// Config corresponds to the JSON schema field "config".
	Config *OryKratosConfigurationSelfserviceMethodsOidcConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsOidcConfig struct {
	// Can be used to modify the base URL for OAuth2 Redirect URLs. If unset, the
	// Public Base URL will be used.
	BaseRedirectUri *string `json:"base_redirect_uri,omitempty" yaml:"base_redirect_uri,omitempty" mapstructure:"base_redirect_uri,omitempty"`

	// A list and configuration of OAuth2 and OpenID Connect providers Ory Kratos
	// should integrate with.
	Providers []SelfServiceOIDCProvider `json:"providers,omitempty" yaml:"providers,omitempty" mapstructure:"providers,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsPasskey struct {
	// Config corresponds to the JSON schema field "config".
	Config *OryKratosConfigurationSelfserviceMethodsPasskeyConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsPasskeyConfig struct {
	// Rp corresponds to the JSON schema field "rp".
	Rp *OryKratosConfigurationSelfserviceMethodsPasskeyConfigRp `json:"rp,omitempty" yaml:"rp,omitempty" mapstructure:"rp,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsPasskeyConfigRp struct {
	// A name to help the user identify this RP.
	DisplayName string `json:"display_name" yaml:"display_name" mapstructure:"display_name"`

	// The id must be a subset of the domain currently in the browser.
	ID string `json:"id" yaml:"id" mapstructure:"id"`

	// A list of explicit RP origins. If left empty, this defaults to either `origin`
	// or `id`, prepended with the current protocol schema (HTTP or HTTPS).
	Origins []string `json:"origins,omitempty" yaml:"origins,omitempty" mapstructure:"origins,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsPassword struct {
	// Define how passwords are validated.
	Config *OryKratosConfigurationSelfserviceMethodsPasswordConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

// Define how passwords are validated.
type OryKratosConfigurationSelfserviceMethodsPasswordConfig struct {
	// If set to false the password validation does not utilize the Have I Been Pwnd
	// API.
	HaveibeenpwnedEnabled bool `json:"haveibeenpwned_enabled,omitempty" yaml:"haveibeenpwned_enabled,omitempty" mapstructure:"haveibeenpwned_enabled,omitempty"`

	// Allows changing the default HIBP host to a self hosted version.
	HaveibeenpwnedHost string `json:"haveibeenpwned_host,omitempty" yaml:"haveibeenpwned_host,omitempty" mapstructure:"haveibeenpwned_host,omitempty"`

	// If set to false the password validation does not check for similarity between
	// the password and the user identifier.
	IdentifierSimilarityCheckEnabled bool `json:"identifier_similarity_check_enabled,omitempty" yaml:"identifier_similarity_check_enabled,omitempty" mapstructure:"identifier_similarity_check_enabled,omitempty"`

	// If set to false the password validation fails when the network or the Have I
	// Been Pwnd API is down.
	IgnoreNetworkErrors bool `json:"ignore_network_errors,omitempty" yaml:"ignore_network_errors,omitempty" mapstructure:"ignore_network_errors,omitempty"`

	// Defines how often a password may have been breached before it is rejected.
	MaxBreaches int `json:"max_breaches,omitempty" yaml:"max_breaches,omitempty" mapstructure:"max_breaches,omitempty"`

	// MigrateHook corresponds to the JSON schema field "migrate_hook".
	MigrateHook *OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHook `json:"migrate_hook,omitempty" yaml:"migrate_hook,omitempty" mapstructure:"migrate_hook,omitempty"`

	// Defines the minimum length of the password.
	MinPasswordLength int `json:"min_password_length,omitempty" yaml:"min_password_length,omitempty" mapstructure:"min_password_length,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHook struct {
	// Config corresponds to the JSON schema field "config".
	Config *OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHookConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// If set to true will enable password migration.
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHookConfig struct {
	// AdditionalProperties corresponds to the JSON schema field
	// "additionalProperties".
	AdditionalProperties interface{} `json:"additionalProperties,omitempty" yaml:"additionalProperties,omitempty" mapstructure:"additionalProperties,omitempty"`

	// Define which auth mechanism the Web-Hook should use
	Auth OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHookConfigAuth `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// Emit tracing events for this hook on delivery or error
	EmitAnalyticsEvent bool `json:"emit_analytics_event,omitempty" yaml:"emit_analytics_event,omitempty" mapstructure:"emit_analytics_event,omitempty"`

	// The HTTP headers that must be applied to the password migration hook.
	Headers OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHookConfigHeaders `json:"headers,omitempty" yaml:"headers,omitempty" mapstructure:"headers,omitempty"`

	// The HTTP method to use (GET, POST, etc).
	Method string `json:"method,omitempty" yaml:"method,omitempty" mapstructure:"method,omitempty"`

	// The URL the password migration hook should call
	Url *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// Define which auth mechanism the Web-Hook should use
type OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHookConfigAuth map[string]interface{}

// The HTTP headers that must be applied to the password migration hook.
type OryKratosConfigurationSelfserviceMethodsPasswordConfigMigrateHookConfigHeaders map[string]string

type OryKratosConfigurationSelfserviceMethodsProfile struct {
	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsTotp struct {
	// Config corresponds to the JSON schema field "config".
	Config *OryKratosConfigurationSelfserviceMethodsTotpConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsTotpConfig struct {
	// The issuer (e.g. a domain name) will be shown in the TOTP app (e.g. Google
	// Authenticator). It helps the user differentiate between different codes.
	Issuer *string `json:"issuer,omitempty" yaml:"issuer,omitempty" mapstructure:"issuer,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsWebauthn struct {
	// Config corresponds to the JSON schema field "config".
	Config *OryKratosConfigurationSelfserviceMethodsWebauthnConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsWebauthnConfig struct {
	// If enabled will have the effect that WebAuthn is used for passwordless flows
	// (as a first factor) and not for multi-factor set ups. With this set to true,
	// users will see an option to sign up with WebAuthn on the registration screen.
	Passwordless *bool `json:"passwordless,omitempty" yaml:"passwordless,omitempty" mapstructure:"passwordless,omitempty"`

	// Rp corresponds to the JSON schema field "rp".
	Rp *OryKratosConfigurationSelfserviceMethodsWebauthnConfigRp `json:"rp,omitempty" yaml:"rp,omitempty" mapstructure:"rp,omitempty"`
}

type OryKratosConfigurationSelfserviceMethodsWebauthnConfigRp struct {
	// An name to help the user identify this RP.
	DisplayName *string `json:"display_name,omitempty" yaml:"display_name,omitempty" mapstructure:"display_name,omitempty"`

	// An icon to help the user identify this RP.
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty" mapstructure:"icon,omitempty"`

	// The id must be a subset of the domain currently in the browser.
	ID *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// An explicit RP origin. If left empty, this defaults to `id`, prepended with the
	// current protocol schema (HTTP or HTTPS).
	Origin *string `json:"origin,omitempty" yaml:"origin,omitempty" mapstructure:"origin,omitempty"`

	// A list of explicit RP origins. If left empty, this defaults to either `origin`
	// or `id`, prepended with the current protocol schema (HTTP or HTTPS).
	Origins []string `json:"origins,omitempty" yaml:"origins,omitempty" mapstructure:"origins,omitempty"`
}

type OryKratosConfigurationServe struct {
	// Admin corresponds to the JSON schema field "admin".
	Admin *OryKratosConfigurationServeAdmin `json:"admin,omitempty" yaml:"admin,omitempty" mapstructure:"admin,omitempty"`

	// Public corresponds to the JSON schema field "public".
	Public *OryKratosConfigurationServePublic `json:"public,omitempty" yaml:"public,omitempty" mapstructure:"public,omitempty"`
}

type OryKratosConfigurationServeAdmin struct {
	// The URL where the admin endpoint is exposed at.
	BaseUrl *string `json:"base_url,omitempty" yaml:"base_url,omitempty" mapstructure:"base_url,omitempty"`

	// The host (interface) kratos' admin endpoint listens on.
	Host string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// The port kratos' admin endpoint listens on.
	Port int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// RequestLog corresponds to the JSON schema field "request_log".
	RequestLog *OryKratosConfigurationServeAdminRequestLog `json:"request_log,omitempty" yaml:"request_log,omitempty" mapstructure:"request_log,omitempty"`

	// Socket corresponds to the JSON schema field "socket".
	Socket *Socket `json:"socket,omitempty" yaml:"socket,omitempty" mapstructure:"socket,omitempty"`

	// Tls corresponds to the JSON schema field "tls".
	Tls *Tlsx `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

type OryKratosConfigurationServeAdminRequestLog struct {
	// Disable request logging for /health/alive and /health/ready endpoints
	DisableForHealth bool `json:"disable_for_health,omitempty" yaml:"disable_for_health,omitempty" mapstructure:"disable_for_health,omitempty"`
}

type OryKratosConfigurationServePublic struct {
	// BaseUrl corresponds to the JSON schema field "base_url".
	BaseUrl *BaseUrl `json:"base_url,omitempty" yaml:"base_url,omitempty" mapstructure:"base_url,omitempty"`

	// Configures Cross Origin Resource Sharing for public endpoints.
	Cors *OryKratosConfigurationServePublicCors `json:"cors,omitempty" yaml:"cors,omitempty" mapstructure:"cors,omitempty"`

	// The host (interface) kratos' public endpoint listens on.
	Host string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// The port kratos' public endpoint listens on.
	Port int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// RequestLog corresponds to the JSON schema field "request_log".
	RequestLog *OryKratosConfigurationServePublicRequestLog `json:"request_log,omitempty" yaml:"request_log,omitempty" mapstructure:"request_log,omitempty"`

	// Socket corresponds to the JSON schema field "socket".
	Socket *Socket `json:"socket,omitempty" yaml:"socket,omitempty" mapstructure:"socket,omitempty"`

	// Tls corresponds to the JSON schema field "tls".
	Tls *Tlsx `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// Configures Cross Origin Resource Sharing for public endpoints.
type OryKratosConfigurationServePublicCors struct {
	// Sets whether the request can include user credentials like cookies, HTTP
	// authentication or client side SSL certificates.
	AllowCredentials bool `json:"allow_credentials,omitempty" yaml:"allow_credentials,omitempty" mapstructure:"allow_credentials,omitempty"`

	// A list of non simple headers the client is allowed to use with cross-domain
	// requests.
	AllowedHeaders []string `json:"allowed_headers,omitempty" yaml:"allowed_headers,omitempty" mapstructure:"allowed_headers,omitempty"`

	// A list of HTTP methods the user agent is allowed to use with cross-domain
	// requests.
	AllowedMethods []OryKratosConfigurationServePublicCorsAllowedMethodsElem `json:"allowed_methods,omitempty" yaml:"allowed_methods,omitempty" mapstructure:"allowed_methods,omitempty"`

	// A list of origins a cross-domain request can be executed from. If the special *
	// value is present in the list, all origins will be allowed. An origin may
	// contain a wildcard (*) to replace 0 or more characters (i.e.:
	// http://*.domain.com). Only one wildcard can be used per origin.
	AllowedOrigins []string `json:"allowed_origins,omitempty" yaml:"allowed_origins,omitempty" mapstructure:"allowed_origins,omitempty"`

	// Adds additional log output to debug server side CORS issues.
	Debug bool `json:"debug,omitempty" yaml:"debug,omitempty" mapstructure:"debug,omitempty"`

	// Sets whether CORS is enabled.
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Sets which headers are safe to expose to the API of a CORS API specification.
	ExposedHeaders []string `json:"exposed_headers,omitempty" yaml:"exposed_headers,omitempty" mapstructure:"exposed_headers,omitempty"`

	// Sets how long (in seconds) the results of a preflight request can be cached. If
	// set to 0, every request is preceded by a preflight request.
	MaxAge int `json:"max_age,omitempty" yaml:"max_age,omitempty" mapstructure:"max_age,omitempty"`

	// TODO
	OptionsPassthrough bool `json:"options_passthrough,omitempty" yaml:"options_passthrough,omitempty" mapstructure:"options_passthrough,omitempty"`
}

type OryKratosConfigurationServePublicCorsAllowedMethodsElem string

const OryKratosConfigurationServePublicCorsAllowedMethodsElemCONNECT OryKratosConfigurationServePublicCorsAllowedMethodsElem = "CONNECT"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemDELETE OryKratosConfigurationServePublicCorsAllowedMethodsElem = "DELETE"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemGET OryKratosConfigurationServePublicCorsAllowedMethodsElem = "GET"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemHEAD OryKratosConfigurationServePublicCorsAllowedMethodsElem = "HEAD"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemOPTIONS OryKratosConfigurationServePublicCorsAllowedMethodsElem = "OPTIONS"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemPATCH OryKratosConfigurationServePublicCorsAllowedMethodsElem = "PATCH"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemPOST OryKratosConfigurationServePublicCorsAllowedMethodsElem = "POST"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemPUT OryKratosConfigurationServePublicCorsAllowedMethodsElem = "PUT"
const OryKratosConfigurationServePublicCorsAllowedMethodsElemTRACE OryKratosConfigurationServePublicCorsAllowedMethodsElem = "TRACE"

type OryKratosConfigurationServePublicRequestLog struct {
	// Disable request logging for /health/alive and /health/ready endpoints
	DisableForHealth bool `json:"disable_for_health,omitempty" yaml:"disable_for_health,omitempty" mapstructure:"disable_for_health,omitempty"`
}

type OryKratosConfigurationSession struct {
	// Cookie corresponds to the JSON schema field "cookie".
	Cookie *OryKratosConfigurationSessionCookie `json:"cookie,omitempty" yaml:"cookie,omitempty" mapstructure:"cookie,omitempty"`

	// Sets when a session can be extended. Settings this value to `24h` will prevent
	// the session from being extended before until 24 hours before it expires. This
	// setting prevents excessive writes to the database. We highly recommend setting
	// this value.
	EarliestPossibleExtend *string `json:"earliest_possible_extend,omitempty" yaml:"earliest_possible_extend,omitempty" mapstructure:"earliest_possible_extend,omitempty"`

	// Defines how long a session is active. Once that lifespan has been reached, the
	// user needs to sign in again.
	Lifespan string `json:"lifespan,omitempty" yaml:"lifespan,omitempty" mapstructure:"lifespan,omitempty"`

	// Control how the `/sessions/whoami` endpoint is behaving.
	Whoami *OryKratosConfigurationSessionWhoami `json:"whoami,omitempty" yaml:"whoami,omitempty" mapstructure:"whoami,omitempty"`
}

type OryKratosConfigurationSessionCookie struct {
	// Sets the session cookie domain. Useful when dealing with subdomains. Use with
	// care! Overrides `cookies.domain`.
	Domain *string `json:"domain,omitempty" yaml:"domain,omitempty" mapstructure:"domain,omitempty"`

	// Sets the session cookie name. Use with care!
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Sets the session cookie path. Use with care! Overrides `cookies.path`.
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// If set to true will persist the cookie in the end-user's browser using the
	// `max-age` parameter which is set to the `session.lifespan` value. Persistent
	// cookies are not deleted when the browser is closed (e.g. on reboot or alt+f4).
	// This option affects the Ory OAuth2 and OpenID Provider's remember feature as
	// well.
	Persistent bool `json:"persistent,omitempty" yaml:"persistent,omitempty" mapstructure:"persistent,omitempty"`

	// Sets the session cookie SameSite. Overrides `cookies.same_site`.
	SameSite *OryKratosConfigurationSessionCookieSameSite `json:"same_site,omitempty" yaml:"same_site,omitempty" mapstructure:"same_site,omitempty"`

	// Sets the session secure flag. If unset, defaults to !dev mode.
	Secure *string `json:"secure,omitempty" yaml:"secure,omitempty" mapstructure:"secure,omitempty"`
}

type OryKratosConfigurationSessionCookieSameSite string

const OryKratosConfigurationSessionCookieSameSiteLax OryKratosConfigurationSessionCookieSameSite = "Lax"
const OryKratosConfigurationSessionCookieSameSiteNone OryKratosConfigurationSessionCookieSameSite = "None"
const OryKratosConfigurationSessionCookieSameSiteStrict OryKratosConfigurationSessionCookieSameSite = "Strict"

// Control how the `/sessions/whoami` endpoint is behaving.
type OryKratosConfigurationSessionWhoami struct {
	// RequiredAal corresponds to the JSON schema field "required_aal".
	RequiredAal *FeatureRequiredAal `json:"required_aal,omitempty" yaml:"required_aal,omitempty" mapstructure:"required_aal,omitempty"`

	// Configure the tokenizer, responsible for converting a session into a token
	// format such as JWT.
	Tokenizer *OryKratosConfigurationSessionWhoamiTokenizer `json:"tokenizer,omitempty" yaml:"tokenizer,omitempty" mapstructure:"tokenizer,omitempty"`
}

// Configure the tokenizer, responsible for converting a session into a token
// format such as JWT.
type OryKratosConfigurationSessionWhoamiTokenizer struct {
	// A list of different templates that govern how a session is converted to a token
	// format.
	Templates OryKratosConfigurationSessionWhoamiTokenizerTemplates `json:"templates,omitempty" yaml:"templates,omitempty" mapstructure:"templates,omitempty"`
}

// A list of different templates that govern how a session is converted to a token
// format.
type OryKratosConfigurationSessionWhoamiTokenizerTemplates map[string]interface{}

type SelfServiceAfterDefaultLoginMethod struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks []interface{} `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceAfterLogin struct {
	// Code corresponds to the JSON schema field "code".
	Code *SelfServiceAfterDefaultLoginMethod `json:"code,omitempty" yaml:"code,omitempty" mapstructure:"code,omitempty"`

	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks []interface{} `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`

	// LookupSecret corresponds to the JSON schema field "lookup_secret".
	LookupSecret *SelfServiceAfterDefaultLoginMethod `json:"lookup_secret,omitempty" yaml:"lookup_secret,omitempty" mapstructure:"lookup_secret,omitempty"`

	// Oidc corresponds to the JSON schema field "oidc".
	Oidc *SelfServiceAfterOIDCLoginMethod `json:"oidc,omitempty" yaml:"oidc,omitempty" mapstructure:"oidc,omitempty"`

	// Passkey corresponds to the JSON schema field "passkey".
	Passkey *SelfServiceAfterDefaultLoginMethod `json:"passkey,omitempty" yaml:"passkey,omitempty" mapstructure:"passkey,omitempty"`

	// Password corresponds to the JSON schema field "password".
	Password *SelfServiceAfterDefaultLoginMethod `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Totp corresponds to the JSON schema field "totp".
	Totp *SelfServiceAfterDefaultLoginMethod `json:"totp,omitempty" yaml:"totp,omitempty" mapstructure:"totp,omitempty"`

	// Webauthn corresponds to the JSON schema field "webauthn".
	Webauthn *SelfServiceAfterDefaultLoginMethod `json:"webauthn,omitempty" yaml:"webauthn,omitempty" mapstructure:"webauthn,omitempty"`
}

type SelfServiceAfterOIDCLoginMethod struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks []interface{} `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceAfterRecovery struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceAfterRecoveryHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceAfterRecoveryHooks []interface{}

type SelfServiceAfterRegistration struct {
	// Code corresponds to the JSON schema field "code".
	Code *SelfServiceAfterRegistrationMethod `json:"code,omitempty" yaml:"code,omitempty" mapstructure:"code,omitempty"`

	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`

	// Oidc corresponds to the JSON schema field "oidc".
	Oidc *SelfServiceAfterRegistrationMethod `json:"oidc,omitempty" yaml:"oidc,omitempty" mapstructure:"oidc,omitempty"`

	// Passkey corresponds to the JSON schema field "passkey".
	Passkey *SelfServiceAfterRegistrationMethod `json:"passkey,omitempty" yaml:"passkey,omitempty" mapstructure:"passkey,omitempty"`

	// Password corresponds to the JSON schema field "password".
	Password *SelfServiceAfterRegistrationMethod `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Webauthn corresponds to the JSON schema field "webauthn".
	Webauthn *SelfServiceAfterRegistrationMethod `json:"webauthn,omitempty" yaml:"webauthn,omitempty" mapstructure:"webauthn,omitempty"`
}

type SelfServiceAfterRegistrationMethod struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks []interface{} `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceAfterSettings struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`

	// LookupSecret corresponds to the JSON schema field "lookup_secret".
	LookupSecret *SelfServiceAfterSettingsAuthMethod `json:"lookup_secret,omitempty" yaml:"lookup_secret,omitempty" mapstructure:"lookup_secret,omitempty"`

	// Oidc corresponds to the JSON schema field "oidc".
	Oidc *SelfServiceAfterSettingsAuthMethod `json:"oidc,omitempty" yaml:"oidc,omitempty" mapstructure:"oidc,omitempty"`

	// Passkey corresponds to the JSON schema field "passkey".
	Passkey *SelfServiceAfterSettingsAuthMethod `json:"passkey,omitempty" yaml:"passkey,omitempty" mapstructure:"passkey,omitempty"`

	// Password corresponds to the JSON schema field "password".
	Password *SelfServiceAfterSettingsAuthMethod `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Profile corresponds to the JSON schema field "profile".
	Profile *SelfServiceAfterSettingsMethod `json:"profile,omitempty" yaml:"profile,omitempty" mapstructure:"profile,omitempty"`

	// Totp corresponds to the JSON schema field "totp".
	Totp *SelfServiceAfterSettingsAuthMethod `json:"totp,omitempty" yaml:"totp,omitempty" mapstructure:"totp,omitempty"`

	// Webauthn corresponds to the JSON schema field "webauthn".
	Webauthn *SelfServiceAfterSettingsAuthMethod `json:"webauthn,omitempty" yaml:"webauthn,omitempty" mapstructure:"webauthn,omitempty"`
}

type SelfServiceAfterSettingsAuthMethod struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks []interface{} `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceAfterSettingsMethod struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks []interface{} `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceAfterVerification struct {
	// DefaultBrowserReturnUrl corresponds to the JSON schema field
	// "default_browser_return_url".
	DefaultBrowserReturnUrl *DefaultReturnTo `json:"default_browser_return_url,omitempty" yaml:"default_browser_return_url,omitempty" mapstructure:"default_browser_return_url,omitempty"`

	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceBeforeLogin struct {
	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceBeforeRecovery struct {
	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceBeforeRegistration struct {
	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceBeforeSettings struct {
	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceBeforeVerification struct {
	// Hooks corresponds to the JSON schema field "hooks".
	Hooks SelfServiceHooks `json:"hooks,omitempty" yaml:"hooks,omitempty" mapstructure:"hooks,omitempty"`
}

type SelfServiceHooks []interface{}

type SelfServiceOIDCProvider struct {
	// AdditionalIDTokenAudiences corresponds to the JSON schema field
	// "additional_id_token_audiences".
	AdditionalIDTokenAudiences []string `json:"additional_id_token_audiences,omitempty" yaml:"additional_id_token_audiences,omitempty" mapstructure:"additional_id_token_audiences,omitempty"`

	// Sign In with Apple Private Key needed for generating a JWT token for client
	// secret
	ApplePrivateKey *string `json:"apple_private_key,omitempty" yaml:"apple_private_key,omitempty" mapstructure:"apple_private_key,omitempty"`

	// Sign In with Apple Private Key Identifier needed for generating a JWT token for
	// client secret
	ApplePrivateKeyID *string `json:"apple_private_key_id,omitempty" yaml:"apple_private_key_id,omitempty" mapstructure:"apple_private_key_id,omitempty"`

	// Apple Developer Team ID needed for generating a JWT token for client secret
	AppleTeamID *string `json:"apple_team_id,omitempty" yaml:"apple_team_id,omitempty" mapstructure:"apple_team_id,omitempty"`

	// AuthUrl corresponds to the JSON schema field "auth_url".
	AuthUrl *string `json:"auth_url,omitempty" yaml:"auth_url,omitempty" mapstructure:"auth_url,omitempty"`

	// Can be either `userinfo` (calls the userinfo endpoint to get the claims) or
	// `id_token` (takes the claims from the id token). It defaults to `id_token`
	ClaimsSource SelfServiceOIDCProviderClaimsSource `json:"claims_source,omitempty" yaml:"claims_source,omitempty" mapstructure:"claims_source,omitempty"`

	// ClientID corresponds to the JSON schema field "client_id".
	ClientID string `json:"client_id" yaml:"client_id" mapstructure:"client_id"`

	// ClientSecret corresponds to the JSON schema field "client_secret".
	ClientSecret *string `json:"client_secret,omitempty" yaml:"client_secret,omitempty" mapstructure:"client_secret,omitempty"`

	// ID corresponds to the JSON schema field "id".
	ID string `json:"id" yaml:"id" mapstructure:"id"`

	// IssuerUrl corresponds to the JSON schema field "issuer_url".
	IssuerUrl *string `json:"issuer_url,omitempty" yaml:"issuer_url,omitempty" mapstructure:"issuer_url,omitempty"`

	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// The URL where the jsonnet source is located for mapping the provider's data to
	// Ory Kratos data.
	MapperUrl string `json:"mapper_url" yaml:"mapper_url" mapstructure:"mapper_url"`

	// The Azure AD Tenant to use for authentication.
	MicrosoftTenant *string `json:"microsoft_tenant,omitempty" yaml:"microsoft_tenant,omitempty" mapstructure:"microsoft_tenant,omitempty"`

	// The ID of the organization that this provider belongs to. Only effective in the
	// Ory Network.
	OrganizationID *string `json:"organization_id,omitempty" yaml:"organization_id,omitempty" mapstructure:"organization_id,omitempty"`

	// PKCE controls if the OpenID Connect OAuth2 flow should use PKCE (Proof Key for
	// Code Exchange). IMPORTANT: If you set this to `force`, you must whitelist a
	// different return URL for your OAuth2 client in the provider's configuration.
	// Instead of <base-url>/self-service/methods/oidc/callback/<provider>, you must
	// use <base-url>/self-service/methods/oidc/callback
	Pkce SelfServiceOIDCProviderPkce `json:"pkce,omitempty" yaml:"pkce,omitempty" mapstructure:"pkce,omitempty"`

	// Can be one of github, github-app, gitlab, generic, google, microsoft, discord,
	// salesforce, slack, facebook, auth0, vk, yandex, apple, spotify, netid,
	// dingtalk, patreon.
	Provider SelfServiceOIDCProviderProvider `json:"provider" yaml:"provider" mapstructure:"provider"`

	// RequestedClaims corresponds to the JSON schema field "requested_claims".
	RequestedClaims OIDCClaims `json:"requested_claims,omitempty" yaml:"requested_claims,omitempty" mapstructure:"requested_claims,omitempty"`

	// Scope corresponds to the JSON schema field "scope".
	Scope []string `json:"scope,omitempty" yaml:"scope,omitempty" mapstructure:"scope,omitempty"`

	// Controls which source the subject identifier is taken from by microsoft
	// provider. If set to `userinfo` (the default) then the identifier is taken from
	// the `sub` field of OIDC ID token or data received from `/userinfo` standard
	// OIDC endpoint. If set to `me` then the `id` field of data structure received
	// from `https://graph.microsoft.com/v1.0/me` is taken as an identifier.
	SubjectSource SelfServiceOIDCProviderSubjectSource `json:"subject_source,omitempty" yaml:"subject_source,omitempty" mapstructure:"subject_source,omitempty"`

	// TokenUrl corresponds to the JSON schema field "token_url".
	TokenUrl *string `json:"token_url,omitempty" yaml:"token_url,omitempty" mapstructure:"token_url,omitempty"`
}

type SelfServiceOIDCProviderClaimsSource string

const SelfServiceOIDCProviderClaimsSourceIDToken SelfServiceOIDCProviderClaimsSource = "id_token"
const SelfServiceOIDCProviderClaimsSourceUserinfo SelfServiceOIDCProviderClaimsSource = "userinfo"

type SelfServiceOIDCProviderPkce string

const SelfServiceOIDCProviderPkceAuto SelfServiceOIDCProviderPkce = "auto"
const SelfServiceOIDCProviderPkceForce SelfServiceOIDCProviderPkce = "force"
const SelfServiceOIDCProviderPkceNever SelfServiceOIDCProviderPkce = "never"

type SelfServiceOIDCProviderProvider string

const SelfServiceOIDCProviderProviderApple SelfServiceOIDCProviderProvider = "apple"
const SelfServiceOIDCProviderProviderAuth0 SelfServiceOIDCProviderProvider = "auth0"
const SelfServiceOIDCProviderProviderDingtalk SelfServiceOIDCProviderProvider = "dingtalk"
const SelfServiceOIDCProviderProviderDiscord SelfServiceOIDCProviderProvider = "discord"
const SelfServiceOIDCProviderProviderFacebook SelfServiceOIDCProviderProvider = "facebook"
const SelfServiceOIDCProviderProviderGeneric SelfServiceOIDCProviderProvider = "generic"
const SelfServiceOIDCProviderProviderGithub SelfServiceOIDCProviderProvider = "github"
const SelfServiceOIDCProviderProviderGithubApp SelfServiceOIDCProviderProvider = "github-app"
const SelfServiceOIDCProviderProviderGitlab SelfServiceOIDCProviderProvider = "gitlab"
const SelfServiceOIDCProviderProviderGoogle SelfServiceOIDCProviderProvider = "google"
const SelfServiceOIDCProviderProviderLark SelfServiceOIDCProviderProvider = "lark"
const SelfServiceOIDCProviderProviderLinkedin SelfServiceOIDCProviderProvider = "linkedin"
const SelfServiceOIDCProviderProviderLinkedinV2 SelfServiceOIDCProviderProvider = "linkedin_v2"
const SelfServiceOIDCProviderProviderMicrosoft SelfServiceOIDCProviderProvider = "microsoft"
const SelfServiceOIDCProviderProviderNetid SelfServiceOIDCProviderProvider = "netid"
const SelfServiceOIDCProviderProviderPatreon SelfServiceOIDCProviderProvider = "patreon"
const SelfServiceOIDCProviderProviderSalesforce SelfServiceOIDCProviderProvider = "salesforce"
const SelfServiceOIDCProviderProviderSlack SelfServiceOIDCProviderProvider = "slack"
const SelfServiceOIDCProviderProviderSpotify SelfServiceOIDCProviderProvider = "spotify"
const SelfServiceOIDCProviderProviderVk SelfServiceOIDCProviderProvider = "vk"
const SelfServiceOIDCProviderProviderX SelfServiceOIDCProviderProvider = "x"
const SelfServiceOIDCProviderProviderYandex SelfServiceOIDCProviderProvider = "yandex"

type SelfServiceOIDCProviderSubjectSource string

const SelfServiceOIDCProviderSubjectSourceMe SelfServiceOIDCProviderSubjectSource = "me"
const SelfServiceOIDCProviderSubjectSourceOid SelfServiceOIDCProviderSubjectSource = "oid"
const SelfServiceOIDCProviderSubjectSourceUserinfo SelfServiceOIDCProviderSubjectSource = "userinfo"

type SelfServiceRequireVerifiedAddressHook struct {
	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

type SelfServiceSessionIssuerHook struct {
	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

type SelfServiceSessionRevokerHook struct {
	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

type SelfServiceShowVerificationUIHook struct {
	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

type SelfServiceVerificationHook struct {
	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

type SelfServiceWebHook struct {
	// Define what the hook should do
	Config SelfServiceWebHookConfig `json:"config" yaml:"config" mapstructure:"config"`

	// Hook corresponds to the JSON schema field "hook".
	Hook interface{} `json:"hook" yaml:"hook" mapstructure:"hook"`
}

// Define what the hook should do
type SelfServiceWebHookConfig struct {
	// AdditionalProperties corresponds to the JSON schema field
	// "additionalProperties".
	AdditionalProperties interface{} `json:"additionalProperties,omitempty" yaml:"additionalProperties,omitempty" mapstructure:"additionalProperties,omitempty"`

	// Define which auth mechanism the Web-Hook should use
	Auth SelfServiceWebHookConfigAuth `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// Body corresponds to the JSON schema field "body".
	Body *string `json:"body,omitempty" yaml:"body,omitempty" mapstructure:"body,omitempty"`

	// Deprecated, please use `response.parse` instead. If enabled allows the web hook
	// to interrupt / abort the self-service flow. It only applies to certain flows
	// (registration/verification/login/settings) and requires a valid response
	// format.
	CanInterrupt bool `json:"can_interrupt,omitempty" yaml:"can_interrupt,omitempty" mapstructure:"can_interrupt,omitempty"`

	// Emit tracing events for this webhook on delivery or error
	EmitAnalyticsEvent bool `json:"emit_analytics_event,omitempty" yaml:"emit_analytics_event,omitempty" mapstructure:"emit_analytics_event,omitempty"`

	// The HTTP headers that must be applied to the Web-Hook
	Headers SelfServiceWebHookConfigHeaders `json:"headers,omitempty" yaml:"headers,omitempty" mapstructure:"headers,omitempty"`

	// The ID of the hook. Used to identify the hook in logs and errors. For debugging
	// purposes only.
	ID *string `json:"id,omitempty" yaml:"id,omitempty" mapstructure:"id,omitempty"`

	// The HTTP method to use (GET, POST, etc).
	Method string `json:"method" yaml:"method" mapstructure:"method"`

	// How the web hook should handle the response
	Response *SelfServiceWebHookConfigResponse `json:"response,omitempty" yaml:"response,omitempty" mapstructure:"response,omitempty"`

	// The URL the Web-Hook should call
	Url string `json:"url" yaml:"url" mapstructure:"url"`
}

// Define which auth mechanism the Web-Hook should use
type SelfServiceWebHookConfigAuth map[string]interface{}

// The HTTP headers that must be applied to the Web-Hook
type SelfServiceWebHookConfigHeaders map[string]string

// How the web hook should handle the response
type SelfServiceWebHookConfigResponse struct {
	// Ignore the response from the web hook. If enabled the request will be made
	// asynchronously which can be useful if you only wish to notify another system
	// but do not parse the response.
	Ignore bool `json:"ignore,omitempty" yaml:"ignore,omitempty" mapstructure:"ignore,omitempty"`

	// If enabled parses the response before saving the flow result. Set this value to
	// true if you would like to modify the identity, for example identity metadata,
	// before saving it during registration. When enabled, you may also abort the
	// registration, verification, login or settings flow due to, for example, a
	// validation flow. Head over to the [web hook
	// documentation](https://www.ory.sh/docs/kratos/hooks/configure-hooks) for more
	// information.
	Parse bool `json:"parse,omitempty" yaml:"parse,omitempty" mapstructure:"parse,omitempty"`
}

type SmsCourierTemplate struct {
	// Body corresponds to the JSON schema field "body".
	Body *SmsCourierTemplateBody `json:"body,omitempty" yaml:"body,omitempty" mapstructure:"body,omitempty"`
}

type SmsCourierTemplateBody struct {
	// A template send to the SMS provider.
	Plaintext *string `json:"plaintext,omitempty" yaml:"plaintext,omitempty" mapstructure:"plaintext,omitempty"`
}

// Sets the permissions of the unix socket
type Socket struct {
	// Group of unix socket. If empty, the group will be the primary group of the user
	// running Kratos.
	Group string `json:"group,omitempty" yaml:"group,omitempty" mapstructure:"group,omitempty"`

	// Mode of unix socket in numeric form
	Mode int `json:"mode,omitempty" yaml:"mode,omitempty" mapstructure:"mode,omitempty"`

	// Owner of unix socket. If empty, the owner will be the user running Kratos.
	Owner string `json:"owner,omitempty" yaml:"owner,omitempty" mapstructure:"owner,omitempty"`
}

// Configure HTTP over TLS (HTTPS). All options can also be set using environment
// variables by replacing dots (`.`) with underscores (`_`) and uppercasing the
// key. For example, `some.prefix.tls.key.path` becomes `export
// SOME_PREFIX_TLS_KEY_PATH`. If all keys are left undefined, TLS will be disabled.
type Tlsx struct {
	// Cert corresponds to the JSON schema field "cert".
	Cert interface{} `json:"cert,omitempty" yaml:"cert,omitempty" mapstructure:"cert,omitempty"`

	// Key corresponds to the JSON schema field "key".
	Key interface{} `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`
}

type TlsxSource struct {
	// The base64 string of the PEM-encoded file content. Can be generated using for
	// example `base64 -i path/to/file.pem`.
	Base64 *string `json:"base64,omitempty" yaml:"base64,omitempty" mapstructure:"base64,omitempty"`

	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`
}

type WebHookAuthApiKeyProperties interface{}

type WebHookAuthBasicAuthProperties interface{}
